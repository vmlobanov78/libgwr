/*
    *****************************************************************************
    *                                                                           *
    *   libgwr-gen-log-main.cc                                                  *
    *                                                                           *
    *   --------------------------------------------------------------------    *
    *                                                                           *
    *   part of libkconfig                                                      *
    *                                                                           *
    *   Copyright (C) 2011-2013 Guillaume Wardavoir                             *
    *                                                                           *
    *   --------------------------------------------------------------------    *
    *                                                                           *
    *   This program is free software; you can redistribute it and/or modify    *
    *   it under the terms of the GNU General Public License as published by    *
    *   the Free Software Foundation; either version 2 of the License, or       *
    *   (at your option) any later version.                                     *
    *                                                                           *
    *   This program is distributed in the hope that it will be useful,         *
    *   but WITHOUT ANY WARRANTY; without even the implied warranty of          *
    *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           *
    *   GNU General Public License for more details.                            *
    *                                                                           *
    *   You should have received a copy of the GNU General Public License       *
    *   along with this program; if not, write to the Free Software             *
    *   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301,   *
    *   USA.                                                                    *
    *                                                                           *
    *   --------------------------------------------------------------------    *
    *                                                                           *
    *   Class   :                                                               *
    *                                                                           *
    *   Purpose : main() for gen-log debug                                      *
    *                                                                           *
    *****************************************************************************
*/


//  ############################################################################
//                              GENERATE
//  ############################################################################
#undef      F_APPEND
#define     F_APPEND(FI, FORMAT, ...)                                           \
    sprintf( FI##_tmp, FORMAT, __VA_ARGS__ );                                   \
    libgwr::dstr::append( FI, FI##_tmp, NULL);

//  ----------------------------------------------------------------------------
//  Generate_multi_module_header()
//  ----------------------------------------------------------------------------
gboolean    Generate_multi_module_header()
{
    guint32     i   = 0;
    guint32     j   = 0;

    FILE    *   f   = NULL;

    parsing::NSP            *   nsp         = NULL;
    parsing::THM            *   thm         = NULL;
    parsing::FLA            *   fla         = NULL;

    GSList  *   sl1         = NULL;
    GSList  *   sl2         = NULL;
    GSList  *   sl3         = NULL;

    gchar       tmp         [128];
    gchar   *   pfmt        =   NULL;                                           //  preformat fmt
    gchar   *   parg        =   NULL;                                           //  preformat args
    gchar       mnS         [128];                                              //  Macro Name Standard
    gchar       mnG         [128];                                              //  Macro Name Glue
    gchar       mnW         [128];                                              //  Macro Name Write
    gchar       mnH         [128];                                              //  Macro Name HTML
    gchar       mnp         [128];                                              //  Macro Name Params
    gchar       mtcha       [128];                                              //  Macro Text Channel
    gchar       mtfla       [128];                                              //  Macro Text Subchannel
    gchar       mtfmt       [512];                                              //  Macro Text Format
    gchar       mtarg       [512];                                              //  Macro Text Arguments
    //  ........................................................................
    f = fopen( parsing::File_h(), "w" );
    if ( ! f )
    {
        //BISON_ERR( "%s", "Generate_kconfig_log_generated_themes_hi:fopen failed");
        return FALSE;
    }
    //  ........................................................................
    //  Write help
    fprintf(f, "/*\n");
    fprintf(f, "\n");
    fprintf(f, "    Macro explanations :\n");
    fprintf(f, "    ------------------\n");
    fprintf(f, "\n");
    fprintf(f, "    MACRO_NAME_XXX      Writes : Channel header + Subchannel Header + text + \"\\n\"\n");
    fprintf(f, "    MACRO_NAME_gXXX     Writes : Channel header + Subchannel Header + text\n");
    fprintf(f, "    MACRO_NAME_wXXX     Writes :                                      text\n");
    fprintf(f, "\n");
    fprintf(f, "*/\n");
    //  ........................................................................
    //  pre-namespace
    Generate_namespaces_prefixes_enter(f);
    //  ........................................................................
    //  libgwr::log::Root object, & init functions

    fprintf(f, "\n%s\n", "extern  libgwr::log::Root   *&  LibGwrLogRoot();");
    fprintf(f,   "%s\n", "extern  libgwr::Logger      *&  LibGwrLogger();");

    fprintf(f, "\n%s\n", "extern  void                    LibGwrLog_init_root     (libgwr::log::Root  * _r);");
    fprintf(f,   "%s\n", "extern  void                    LibGwrLog_init_logger   (libgwr::Logger     * _l);");
    fprintf(f,   "%s\n", "extern  void                    LibGwrLog_set           (libgwr::log::Root  * _r, libgwr::Logger* _l);");
    //  ........................................................................
    //  main loop
    sl1 = parsing::Namespaces_list(); while ( sl1 )
    {
        nsp = static_cast < parsing::NSP * > ( sl1->data );

        sl2 = nsp->slist();

        if ( g_slist_length( sl2 ) == 0 )
            goto lab_sl1_next;

        //  + namespace
        fprintf(f, "%s", "//  ############################################################################\n");
        Generate_nsp_enter(f, nsp);
        fprintf(f, "%s", "\n");

        while ( sl2 )
        {
            pfmt = NULL;
            parg = NULL;

            thm = static_cast < parsing::THM * > ( sl2->data );

            //  ................................................................
            //  Write : Theme declaration + wrappers
            fprintf(f, "//  ----------------------------------------------------------------------------\n");
            fprintf(f, "//  THEME : name:%s  - macro:%s  - channel:%s\n", thm->name(), thm->macro_full(), thm->channel()->name_core());
            fprintf(f, "//  ----------------------------------------------------------------------------\n");

            /*
            fprintf(f, "inline  void    %s_wrap(guint32 _channel, guint32 _subchannel_start)\n", thm->macro_core());
            fprintf(f, "{\n");
            fprintf(f, "    libgwr::log::Theme_wrap(%s, _channel, _subchannel_start);\n", thm->macro_core());
            fprintf(f, "}\n");

            fprintf(f, "inline  void    %s_unwrap()\n", thm->macro_core());
            fprintf(f, "{\n");
            fprintf(f, "    libgwr::log::Theme_unwrap(%s);\n", thm->macro_core());
            fprintf(f, "}\n");

            fprintf(f, "\n");
            */
            //  ................................................................
            //  Preformat : definition
            {

            pfmt    =   g_strconcat( "PREFORMAT_FMT_", nsp->nfu(), "_", thm->macro_full(), NULL);
            parg    =   g_strconcat( "PREFORMAT_ARG_", nsp->nfu(), "_", thm->macro_full(), NULL);

            //  params ? add parameters to macro arguments
            if ( thm->params() )
            {
                libgwr::dstr::append( parg, "(", NULL );
                for ( i = 0 ; i != thm->params()->card() ; i++ )
                {
                    if ( i )
                        libgwr::dstr::append( parg, ", ", thm->params()->get(i), NULL );
                    else
                        libgwr::dstr::append( parg, thm->params()->get(i), NULL );
                }
                libgwr::dstr::append( parg, ")", NULL );
            }

            }
            //  ................................................................
            //  Write : preformat
            {

            if ( thm->tprf() )
            {
                fprintf(f, "#define %s(FORMAT) %s FORMAT \n", pfmt, thm->tprf()->fmt() );
                fprintf(f, "#define %s %s\n", parg, thm->tprf()->arg() );
            }
            else
            {
                fprintf(f, "%s\n", "// no preformat");
            }

            }

            //  ................................................................
            //  Write : theme access
            fprintf(f, "\n");
            fprintf(f, "inline  libgwr::log::Theme* %s()   { return libkconfig::log::LibGwrLogRoot()->thm(%u); }",
                thm->macro_core()   ,
                thm->gix()          );
            fprintf(f, "\n");
            //  ................................................................
            //  Write : flavours ( subchannels )
            j = 0 ; sl3 = thm->slist(); while ( sl3 )
            {
                fla = static_cast < parsing::FLA * > ( sl3->data );

                //  ............................................................
                //  macro call
                {

                sprintf(mnS, "%s_%s"    , thm->macro_full(), fla->name());      //  standard macro  : INF
                sprintf(mnG, "%s_g%s"   , thm->macro_full(), fla->name());      //  glue     macro  : gINF
                sprintf(mnW, "%s_w%s"   , thm->macro_full(), fla->name());      //  write    macro  : wINF
                if ( ! j )                                                      //  html macro defaults to subchannel #0
                {
                    sprintf(mnH, "%s_HTML"  , thm->macro_full()         );      //  html     macro  : HTML
                }

                if ( ! thm->params() )
                {
                    sprintf(mnp, "(FORMAT, ...)");
                }
                else
                {
                    sprintf(mnp, "(");
                    for ( i = 0 ; i != thm->params()->card() ; i++ )
                    {
                        sprintf(tmp,"%s, ", thm->params()->get(i));
                        strcat(mnp, tmp);
                    }
                    strcat(mnp,"FORMAT, ...)");
                }

                }
                //  ............................................................
                //  macro content
                {

                sprintf(mtcha, "%s::LibGwrLogRoot()->thm(%u)->cix()", libgwr::log::parsing::Namespaces_prefix(), thm->gix());
                sprintf(mtfla, "%s::LibGwrLogRoot()->fla(%u)->six()", libgwr::log::parsing::Namespaces_prefix(), fla->gix());

                if ( thm->tprf() )
                {
                    sprintf ( tmp, "%s(FORMAT)"     , pfmt);
                    strcpy  ( mtfmt, tmp );

                    sprintf ( tmp, "%s, __VA_ARGS__", parg);
                    strcpy  ( mtarg, tmp );
                }
                else
                {
                    sprintf ( tmp, "FORMAT");
                    strcpy  ( mtfmt, tmp );

                    sprintf ( tmp, "%s", "__VA_ARGS__");
                    strcpy  ( mtarg, tmp );
                }
                //fprintf(f, "\n");

                }
                //  ............................................................
                //  Write
                {

                fprintf(f, "\n");

                if ( ! j )                                                      //  if subchannel #0, write HTML macro
                {
                fprintf(f, "#define %s%s ", mnH, mnp);
                fprintf(f, "%s::LibGwrLogger()->write_html( %s, %s, %s, %s );\n", parsing::Namespaces_prefix(), mtcha, mtfla, mtfmt, mtarg);
                fprintf(f, "\n");
                }

                //  Standard
                fprintf(f, "#define %s%s  ", mnS, mnp);
                fprintf(f, "%s::LibGwrLogger()->lognl( %s, %s, %s, %s );\n", parsing::Namespaces_prefix(), mtcha, mtfla, mtfmt, mtarg);
                //  Glue
                fprintf(f, "#define %s%s ", mnG, mnp);
                fprintf(f, "%s::LibGwrLogger()->log(   %s, %s, %s, %s );\n", parsing::Namespaces_prefix(), mtcha, mtfla, mtfmt, mtarg);
                //  Return
                fprintf(f, "#define %s%s ", mnW, mnp);
                fprintf(f, "%s::LibGwrLogger()->write( %s, %s, %s, %s );\n", parsing::Namespaces_prefix(), mtcha, mtfla, mtfmt, mtarg);

                }

                j++;
                sl3 = g_slist_next( sl3 );
            }

            g_free( pfmt );
            g_free( parg );
            sl2 = g_slist_next( sl2 );
        }

        //  - namespace
        Generate_nsp_exit(f, nsp);
        fprintf(f, "%s", "\n");

lab_sl1_next:
        sl1 = g_slist_next( sl1 );
    }
    //  ........................................................................
    //  pre-namespace
    Generate_namespaces_prefixes_exit(f);
    //  ........................................................................
lab_success:
    fclose(f);
    return TRUE;
    //  ........................................................................
lab_failure:
    fclose(f);
    return FALSE;
}
//  ----------------------------------------------------------------------------
//  Generate_multi_module_code_functions()
//  ----------------------------------------------------------------------------
gboolean    Generate_multi_module_code_functions()
{
    guint32     i   = 0;

    FILE    *   f   = NULL;

    parsing::NSP     *   nsp         = NULL;
    parsing::THM     *   thm         = NULL;
    parsing::FLA     *   fla         = NULL;

    GSList  *   sl1         = NULL;
    GSList  *   sl2         = NULL;
    GSList  *   sl3         = NULL;

    gchar   *   f1          = NULL;                                             // Generated_namespaces_build()
    gchar       f1_tmp      [1024];
    gchar       f1_t1       [1024];
    gchar       f1_t2       [1024];
    gchar       f1_t3       [1024];

    gchar   *   f2          = NULL;                                             // Generated_logger_create_subchannels()
    gchar       f2_tmp      [1024];
    gchar       f2_t1       [1024];

    ////gchar   *   f3          = NULL;                                             // Generated_set_logbase()
    ////gchar       f3_tmp      [1024];
    //  ........................................................................
    //  context :
    //  libgwr::Logger              *   l           = NULL;
    //  libgwr::TextAttributes          t_fg_grn    = libgwr::TextAttributes( libgwr::text::attributes::FgColor, libgwr::color::Grn     );
    //  libgwr::TextAttributes          t_fg_ora    = libgwr::TextAttributes( libgwr::text::attributes::FgColor, libgwr::color::Ora     );
    //  libgwr::TextAttributes          t_fg_red    = libgwr::TextAttributes( libgwr::text::attributes::FgColor, libgwr::color::Red     );
    //  libgwr::TextAttributes          t_fg_grey9  = libgwr::TextAttributes( libgwr::text::attributes::FgColor, libgwr::color::Grey9   );
    //
    //  sample of what we want :
    //  l->channel( LIBKCONFIG_LOG_CHANNEL_OBJECT )->create_subchannel("INF", t_fg_grn);
    //  ........................................................................
    f = fopen( parsing::File_cc(), "w");
    if ( ! f )
    {
        //PARSING_ERR( "%s", "Generate_module_code_functions:fopen failed");
        return FALSE;
    }
    //  ........................................................................
    //  pre-namespace
    Generate_namespaces_prefixes_enter(f);
    //  ........................................................................
    //  root & logger set / get
    fprintf(f, "\n" );
    fprintf(f, "%s\n",  "static  libgwr::log::Root   *   pa_root     = NULL;");
    fprintf(f, "%s\n",  "static  libgwr::Logger      *   pa_logger   = NULL;");
    fprintf(f, "\n" );
    fprintf(f,          "libgwr::log::Root   *&  LibGwrLogRoot()     { return %s::pa_root; }\n"     , parsing::Namespaces_prefix() );
    fprintf(f,          "libgwr::Logger      *&  LibGwrLogger()      { return %s::pa_logger; }\n"   , parsing::Namespaces_prefix() );
    fprintf(f, "\n" );
    fprintf(f, "%s\n",  "void                    LibGwrLog_set(");
    fprintf(f, "%s\n", "libgwr::log::Root   *   _r  ,");
    fprintf(f, "%s\n", "libgwr::Logger      *   _l  )");
    fprintf(f, "%s\n", "{");
    fprintf(f, "%s\n",  "    libkconfig::log::pa_root    =   _r;");
    fprintf(f, "%s\n",  "    libkconfig::log::pa_logger  =   _l;");
    fprintf(f, "%s\n", "}");
    //  ........................................................................
    //  init_tree()
    {

    sprintf(f1_t1, "\n%s", "void LibGwrLog_init_root     (libgwr::log::Root * _r)\n{\n");
    libgwr::dstr::set( f1, f1_t1 );
    F_APPEND(f1, "%s", "    libgwr::log::Namespace * n = NULL;\n");
    F_APPEND(f1, "%s", "    libgwr::log::Theme     * t = NULL;\n");
    F_APPEND(f1, "%s", "    libgwr::log::Flavour   * f = NULL;\n");
    F_APPEND(f1, "%s", "    //..........................................................................\n");

    }
    //  init_logger()
    {

    sprintf(f2_t1, "\n%s", "void LibGwrLog_init_logger   (libgwr::Logger* _l)\n{\n");
    libgwr::dstr::set( f2, f2_t1 );
    F_APPEND(f2, "%s", "    //..........................................................................\n");

    }
    //  ........................................................................
    //  namespaces loop
    sl1 = parsing::Namespaces_list(); while ( sl1 )
    {
        nsp = static_cast < parsing::NSP * > ( sl1->data );

        sl2 = nsp->slist();

        //  init_tree()
        {

        if ( g_slist_length( sl2 ) == 0 )
        {
            F_APPEND(f1, "%s", "    //  ========================================================================\n");
            F_APPEND(f1,       "    //  NAMESPACE : %s ( no themes )\n", nsp->nf());
            F_APPEND(f1, "%s", "    //  ========================================================================\n");
            goto lab_sl1_next;
        }
        else
        {
            F_APPEND(f1, "%s", "    //  ========================================================================\n");
            F_APPEND(f1,       "    //  NAMESPACE : %s\n", nsp->nf());
            F_APPEND(f1, "%s", "    //  ========================================================================\n");
            F_APPEND(f1,       "    n = GWR_NEW_CAST( libgwr::log::Namespace, \"%s\" );\n", nsp->nf());
            F_APPEND(f1, "%s", "    _r->nsp_add( n );\n");
        }

        }

        //  ....................................................................
        //  themes loop
        while ( sl2 )
        {
            thm = static_cast < parsing::THM * > ( sl2->data );

            //  init_tree()
            {

            F_APPEND(f1, "%s", "    //  ------------------------------------------------------------------------\n");
            F_APPEND(f1,       "    //  THEME : name:%s  - macro:%s  - channel:%s\n", thm->name(), thm->macro_core(), thm->channel()->name_core());
            F_APPEND(f1, "%s", "    //  ------------------------------------------------------------------------\n");
            F_APPEND(f1,       "    t = GWR_NEW_CAST( libgwr::log::Theme, \"%s\", %u, %s );\n", thm->name(), thm->gix(), thm->channel()->name_full());
            F_APPEND(f1,       "    _r->thm_set( %u, t );\n", thm->gix());
            F_APPEND(f1,       "    n->thm_ix_add( %u );\n", thm->gix());

            }

            //  init_logger()
            {

            F_APPEND(f2, "%s", "    //  ------------------------------------------------------------------------\n");
            F_APPEND(f2,       "    //  THEME : name:%s  - macro:%s  - channel:%s\n", thm->name(), thm->macro_full(), thm->channel()->name_core());
            F_APPEND(f2, "%s", "    //  ------------------------------------------------------------------------\n");

            //F_APPEND(f2,       "    _l->channel_create( %s, \"%s\", %u, %u, TRUE);\n", thm->channel()->name_full(), thm->name(), 150, 2);

            }

            //  ................................................................
            //  subchannels loop
            sl3 = thm->slist(); while ( sl3 )
            {
                fla = static_cast < parsing::FLA * > ( sl3->data );

                //  init_tree()
                {

                //  subchannel text attributes
                sprintf(f1_t1, "libgwr::TextAttributes( libgwr::text::attributes::FgColor | libgwr::text::attributes::BgColor");
                if ( fla->fmt()->card() )
                {
                    for ( i = 0 ; i != fla->fmt()->card() ; i++ )
                    {
                        sprintf(f1_t2, " | libgwr::text::attributes::%s", fla->fmt()->get(i));
                        strcat(f1_t1, f1_t2);
                    }
                }
                sprintf(f1_t2,         ", libgwr::color::%s, libgwr::color::%s )",
                    fla->fg()                       ,
                    fla->bg() ? fla->bg() : "Std"   );
                sprintf(f1_t3, "%s%s", f1_t1, f1_t2 );

                //  create flavour
                F_APPEND( f1, "    f = GWR_NEW_CAST( libgwr::log::Flavour, \"%s\", %u, %u, %s);\n",
                    fla->name()         ,
                    fla->gix()          ,
                    fla->six()          ,
                    f1_t3               );

                F_APPEND( f1, "    _r->fla_set( %u, f );\n", fla->gix());
                F_APPEND( f1, "     t->fla_ix_add( %u );\n", fla->gix());

                }


                //  init_logger()
                {

                F_APPEND(f2,           "    _l->channel( %s )->create_subchannel( %u, \"%s\", %s, FALSE, TRUE);\n",
                    thm->channel()->name_full() ,
                    fla->six()                  ,
                    fla->name()                 ,
                    f1_t3);

                }

                sl3 = g_slist_next( sl3 );
            }

            sl2 = g_slist_next( sl2 );
        }


lab_sl1_next:
        sl1 = g_slist_next( sl1 );
    }
    //  ........................................................................
    //  Generated_namespaces_init()
    fprintf(f, "%s}\n", f1);
    g_free( f1 );

    fprintf(f, "%s", "//  ############################################################################\n");
    fprintf(f, "%s}\n", f2);
    g_free( f2 );

    //  ........................................................................
    //  pre-namespace
    Generate_namespaces_prefixes_exit(f);

lab_success:
    fclose(f);
    return TRUE;

lab_failure:
    fclose(f);
    return FALSE;
}

